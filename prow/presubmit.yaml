# PR Jenkins job triggering definitions.
# Keys: Full repo name: "org/repo".
# Values: List of jobs to run when events occur in the repo.
#   name:          Job name.
#   trigger:       Regexp commenters can say to trigger the job.
#   always_run:    Whether to run for every PR. Default is false. If this is
#                  set then your trigger needs to match "@k8s-bot test this".
#   context:       GitHub status context.
#   rerun_command: How should users trigger just this job, as a string, not a
#                  regex. For example, if the trigger regex is "(e2e )?test",
#                  then a rerun command might be "e2e test".
#   skip_report:   If true, then do not set status or comment on GitHub.
#   spec:          If this exists then run a kubernetes pod with this spec.
#                  Otherwise, run a Jenkins job.
# The unit tests in cmd/hook/jobs_test.go ensure that the job definitions are
# valid.
# TODO(fejta): Ensure all jobs define an owner.
---
colemickens/acs-engine:
- name: acspr-checkin-tests
  context: checkin-tests
  always_run: true
  rerun_command: "@acs-bot run checkin-tests"
  trigger: "@acs-bot run checkin-tests"
  branches:
  - master
  spec:
    containers:
    - image: docker.io/colemickens/acs-engine:latest
      command: [ "/bin/bash", "-xc", "/tmp/checkout-pr.sh && make ci" ]
- name: acspr-e2e-k8s
  context: e2e-k8s
  always_run: true
  rerun_command: "@acs-bot run e2e-k8s"
  trigger: "@acs-bot run e2e-k8s"
  branches:
  - master
  spec:
    containers:
    - image: docker.io/colemickens/acs-engine:latest
      imagePullPolicy: Always
      command: [ "/bin/bash", "-xc", "/tmp/checkout-pr.sh && pwd && ls && ./test/deploy.sh" ]
      env:
      - { "name": "VALIDATE", "value": "test/cluster-tests/kubernetes/test.sh" }
      - { "name": "CLUSTER_DEFINITION", "value": "examples/kubernetes.json" }
      - { "name": "LOCATION", "value": "westus2" }
      - { "name": "SUBSCRIPTION_ID", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "SUBSCRIPTION_ID" } } }
      - { "name": "TENANT_ID", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "TENANT_ID" } } }
      - { "name": "SERVICE_PRINCIPAL_CLIENT_ID", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "SERVICE_PRINCIPAL_CLIENT_ID" } } }
      - { "name": "SERVICE_PRINCIPAL_CLIENT_SECRET", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "SERVICE_PRINCIPAL_CLIENT_SECRET" } } }
- name: acspr-e2e-dcos
  context: e2e-dcos
  always_run: true
  rerun_command: "@acs-bot run e2e-dcos"
  trigger: "@acs-bot run e2e-dcos"
  branches:
  - master
  spec:
    containers:
    - image: docker.io/colemickens/acs-engine:latest
      imagePullPolicy: Always
      command: [ "/bin/bash", "-xc", "/tmp/checkout-pr.sh && pwd && ls && ./test/deploy.sh" ]
      env:
      - { "name": "VALIDATE", "value": "test/cluster-tests/dcos/test.sh" }
      - { "name": "CLUSTER_DEFINITION", "value": "examples/dcos.json" }
      - { "name": "LOCATION", "value": "westus2" }
      - { "name": "SUBSCRIPTION_ID", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "SUBSCRIPTION_ID" } } }
      - { "name": "TENANT_ID", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "TENANT_ID" } } }
      - { "name": "SERVICE_PRINCIPAL_CLIENT_ID", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "SERVICE_PRINCIPAL_CLIENT_ID" } } }
      - { "name": "SERVICE_PRINCIPAL_CLIENT_SECRET", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "SERVICE_PRINCIPAL_CLIENT_SECRET" } } }
- name: acspr-e2e-swarmmode
  context: e2e-swarmmode
  always_run: true
  rerun_command: "@acs-bot run e2e-swarmmode"
  trigger: "@acs-bot run e2e-swarmmode"
  branches:
  - master
  spec:
    containers:
    - image: docker.io/colemickens/acs-engine:latest
      imagePullPolicy: Always
      command: [ "/bin/bash", "-xc", "/tmp/checkout-pr.sh && pwd && ls && ./test/deploy.sh" ]
      env:
      - { "name": "VALIDATE", "value": "test/cluster-tests/swarmmode/test.sh" }
      - { "name": "CLUSTER_DEFINITION", "value": "examples/swarmmode.json" }
      - { "name": "LOCATION", "value": "westus2" }
      - { "name": "SUBSCRIPTION_ID", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "SUBSCRIPTION_ID" } } }
      - { "name": "TENANT_ID", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "TENANT_ID" } } }
      - { "name": "SERVICE_PRINCIPAL_CLIENT_ID", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "SERVICE_PRINCIPAL_CLIENT_ID" } } }
      - { "name": "SERVICE_PRINCIPAL_CLIENT_SECRET", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "SERVICE_PRINCIPAL_CLIENT_SECRET" } } }
# TODO: swarm valdation script
#- name: acspr-e2e-swarm
#  context: e2e-swarm
#  always_run: true
#  rerun_command: "@acs-bot run e2e-swarm"
#  trigger: "@acs-bot run e2e-swarm"
#  branches:
#  - master
#  spec:
#    containers:
#    - image: docker.io/colemickens/acs-engine:latest
#      imagePullPolicy: Always
#      command: [ "/bin/bash", "-xc", "/tmp/checkout-pr.sh && pwd && ls && ./test/deploy.sh" ]
#      env:
#      - { "name": "VALIDATE", "value": "y" }
#      - { "name": "CLUSTER_TYPE", "value": "swarm" }
#      - { "name": "CLUSTER_DEFINITION", "value": "examples/swarm.json" }
#      - { "name": "LOCATION", "value": "westus2" }
#      - { "name": "SUBSCRIPTION_ID", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "SUBSCRIPTION_ID" } } }
#      - { "name": "TENANT_ID", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "TENANT_ID" } } }
#      - { "name": "SERVICE_PRINCIPAL_CLIENT_ID", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "SERVICE_PRINCIPAL_CLIENT_ID" } } }
#      - { "name": "SERVICE_PRINCIPAL_CLIENT_SECRET", "valueFrom": { "secretKeyRef": { "name": "azure-ci", "key": "SERVICE_PRINCIPAL_CLIENT_SECRET" } } }
