# PR Jenkins job triggering definitions.
# Keys: Full repo name: "org/repo".
# Values: List of jobs to run when events occur in the repo.
#   name:          Job name.
#   trigger:       Regexp commenters can say to trigger the job.
#   always_run:    Whether to run for every PR. Default is false. If this is
#                  set then your trigger needs to match "@k8s-bot test this".
#   context:       GitHub status context.
#   rerun_command: How should users trigger just this job, as a string, not a
#                  regex. For example, if the trigger regex is "(e2e )?test",
#                  then a rerun command might be "e2e test".
#   skip_report:   If true, then do not set status or comment on GitHub.
#   spec:          If this exists then run a kubernetes pod with this spec.
#                  Otherwise, run a Jenkins job.
# The unit tests in cmd/hook/jobs_test.go ensure that the job definitions are
# valid.
# TODO(fejta): Ensure all jobs define an owner.
---
colemickens/acs-engine:
- name: pull-acs-engine-unit-tests
  context: ACS-Engine unit tests
  always_run: true
  rerun_command: "@acs-bot unit test this"
  trigger: "@acs-bot (unit )?test this"
  branches:
  - master
  spec:
    containers:
    - image: docker.io/colemickens/acs-engine:bf30ceb13ed16068f8555b021c6bfed19f27737f
      command: [ "/bin/bash", "-c", "/tmp/checkout-pr.sh && make ci" ]
- name: pull-acs-engine-validate-k8s-msi
  context: ACS-Engine validate k8s
  always_run: true
  rerun_command: "@acs-bot validate k8s"
  trigger: "@acs-bot validate k8s"
  branches:
  - master
  spec:
    containers:
    - image: docker.io/colemickens/acs-engine:bf30ceb13ed16068f8555b021c6bfed19f27737f 
      command: [ "/bin/bash", "-c", "/tmp/checkout-pr.sh && ./test/deploy-k8s.sh" ]
      env:
      - name: LOCATION
        value: westus
      - name: SUBSCRIPTION_ID
        valueFrom:
          secretKeyRef:
            name: "azure-ci"
            key: SUBSCRIPTION_ID
      - name: TENANT_ID
        valueFrom:
          secretKeyRef:
            name: "azure-ci"
            key: TENANT_ID
      - name: SERVICE_PRINCIPAL_CLIENT_ID
        valueFrom:
          secretKeyRef:
            name: "azure-ci"
            key: SERVICE_PRINCIPAL_CLIENT_ID
      - name: SERVICE_PRINCIPAL_CLIENT_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "azure-ci"
            key: SERVICE_PRINCIPAL_CLIENT_PASSWORD
